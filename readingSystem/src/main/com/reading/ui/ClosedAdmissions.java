package com.reading.ui;

import java.util.LinkedHashMap;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.reading.db.FeesDb;
import com.reading.db.Student;
import com.reading.hm.ActionTrackerHM;
import com.reading.operaton.FormatFrame;
import com.reading.operaton.SearchTableData;
import com.reading.operaton.SetAllTable;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Sawant
 */
public class ClosedAdmissions extends javax.swing.JInternalFrame {

    TableRowSorter<TableModel> sorter;

    /**
     * Creates new form ClosedAdmissions
     */
    public ClosedAdmissions(Home home) {
        initComponents();
        FormatFrame ff = new FormatFrame(this);
        ff.formatTable(table);
        new SetAllTable().setClosedAdmissionsTable(table);
        new SearchTableData(searchText, table);
        sorter = new TableRowSorter<TableModel>(table.getModel());
        table.setRowSorter(sorter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        searchText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        reOpenBtn = new javax.swing.JButton();
        deletBtn = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Search");

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });
        searchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextKeyReleased(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Address", "Mobile No.", "Altrenate Mo. No.", "Parents Mo. No.", "Qualification", "Occupation", "Joining Date", "Admission Type", "Shift Type", "Fee Status", "Last fee Paid", "Last Fee Paid Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(25);
        table.setSelectionBackground(new java.awt.Color(255, 153, 0));
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(150);
            table.getColumnModel().getColumn(0).setPreferredWidth(150);
            table.getColumnModel().getColumn(1).setMinWidth(150);
            table.getColumnModel().getColumn(1).setPreferredWidth(150);
            table.getColumnModel().getColumn(2).setMinWidth(100);
            table.getColumnModel().getColumn(2).setPreferredWidth(100);
            table.getColumnModel().getColumn(3).setMinWidth(100);
            table.getColumnModel().getColumn(3).setPreferredWidth(100);
            table.getColumnModel().getColumn(4).setMinWidth(100);
            table.getColumnModel().getColumn(4).setPreferredWidth(100);
            table.getColumnModel().getColumn(5).setMinWidth(150);
            table.getColumnModel().getColumn(5).setPreferredWidth(150);
            table.getColumnModel().getColumn(6).setMinWidth(150);
            table.getColumnModel().getColumn(6).setPreferredWidth(150);
            table.getColumnModel().getColumn(7).setMinWidth(100);
            table.getColumnModel().getColumn(7).setPreferredWidth(100);
            table.getColumnModel().getColumn(8).setMinWidth(150);
            table.getColumnModel().getColumn(8).setPreferredWidth(150);
            table.getColumnModel().getColumn(9).setMinWidth(150);
            table.getColumnModel().getColumn(9).setPreferredWidth(150);
            table.getColumnModel().getColumn(10).setMinWidth(100);
            table.getColumnModel().getColumn(10).setPreferredWidth(100);
            table.getColumnModel().getColumn(11).setMinWidth(100);
            table.getColumnModel().getColumn(11).setPreferredWidth(100);
        }

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("List of Student's whose admission has been closed");

        reOpenBtn.setText("ReOpen Admission");
        reOpenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reOpenBtnActionPerformed(evt);
            }
        });

        deletBtn.setText("Delete");
        deletBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(reOpenBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deletBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 920, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reOpenBtn)
                    .addComponent(deletBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextKeyReleased
        // TODO add your handling code here:
        String text = searchText.getText();
        if (text.length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter(text));
        }
    }//GEN-LAST:event_searchTextKeyReleased

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_searchTextActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_searchTextActionPerformed

    private void reOpenBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_reOpenBtnActionPerformed
        // TODO add your handling code here:
        int row = table.getSelectedRow();
        if (row >= 0) {
            int reply = JOptionPane.showConfirmDialog(null, "Are you sure, You want to reactivate student admission ?",
                    "Conform action", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                LinkedHashMap<String, Object> record = new LinkedHashMap<String, Object>();
                try {
                    record.put("ID", (String) table.getValueAt(row, 0));
                    record.put("STATUS", "ACTIVE");
                    if (new Student().update(record)) {
                        new ActionTrackerHM("Admission Reopened", (String) table.getValueAt(table.getSelectedRow(), 0));
                        JOptionPane.showMessageDialog(this, "Student admission Activated sucessfully !",
                                "Sawant Balaji", JOptionPane.INFORMATION_MESSAGE);
                        row = -1;
                    } else {
                        JOptionPane.showMessageDialog(this, "Admission not activated, Something went wrong...",
                                "Sawant Balaji", JOptionPane.ERROR_MESSAGE);
                    }
                    ((DefaultTableModel) table.getModel()).setRowCount(0);
                    new SetAllTable().setClosedAdmissionsTable(table);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select Student to reopen admission.", "Student not selected",
                    JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_reOpenBtnActionPerformed

    private void deletBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deletBtnActionPerformed
        // TODO add your handling code here:
        int row = table.getSelectedRow();
        if (row >= 0) {
            int reply = JOptionPane.showConfirmDialog(null,
                    "Are you sure, You want to delete student record permenently ?", "Conform action",
                    JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                LinkedHashMap<String, Object> record = new LinkedHashMap<String, Object>();
                try {
                    record.put("ID", (String) table.getValueAt(row, 0));
                    if (new Student().delete(record) && new FeesDb().delete(record)) {
                        new ActionTrackerHM("Student record deleted from closed admission list",
                                (String) table.getValueAt(table.getSelectedRow(), 0));
                        JOptionPane.showMessageDialog(this, "Student Record deleted permenentl !", "Record Deleted",
                                JOptionPane.INFORMATION_MESSAGE);
                        row = -1;
                    } else {
                        JOptionPane.showMessageDialog(this, "Could not delete record, Something went wrong...",
                                "Sawant Balaji", JOptionPane.ERROR_MESSAGE);
                    }
                    ((DefaultTableModel) table.getModel()).setRowCount(0);
                    new SetAllTable().setClosedAdmissionsTable(table);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select Student to reopen admission.", "Student not selected",
                    JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_deletBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deletBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reOpenBtn;
    private javax.swing.JTextField searchText;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
